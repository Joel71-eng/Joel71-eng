import math
#g(x)=(x^2+c)modn.
#def crack_sync(initial):
d=1
x=2
y=x
n=1070700150707942895227
c=1
while d==1:
   x=(pow(x,2)+1)%n
   y=(pow(((pow(y,2)+1)%n),2)+1)%n
   print(y)
   w=abs(x-y)
   num=[w,n]
   print("w>>:",w)
   def Euclidean(gcd):
      if gcd[1]>gcd[0]:
          n=gcd[0]
          m=gcd[1]
          gcd[0]=m
          gcd[1]=n
      r=(gcd[0]%gcd[1])

      if r==0:
               return gcd[1]
      else:
               return Euclidean([gcd[1],r])

   d=Euclidean(num)
   if d==n:
        print("Error!\n:",n)
        print("May be prime\nTry using different different values of x,y and c")
        break
   if d!=1:
        print("Factor1:",d)
        break
f2= 1070700150707942895227/d
print("Factor2:",f2)

def dcracker(a, n):
    t, newt = 0, 1
    r, newr = n, a

    while newr:
        quotient = r // newr  # floor division
        t, newt = newt, t - quotient * newt
        r, newr = newr, r - quotient * newr
    
    if r > 1:
        return None  # no solution
    
    if t < 0:
        t = t + n
    
    return t
  
d=31256238119
f2=34255566733
tot=(d-1)*(f2-1)
e=65537
pri_key=dcracker(e,n)
print("private key>:",pri_key)
#Encrypting & decrypting function
#Encrypting>>[e,n]
#Decryptinh>>[d,n]
def EncryptoDecryptoG9(key,letter):
  print("#letter code list")  
  print(letter_code) 
  print("#ciphertext list") 
  for i in letter_code:
      pb_key[0] =i
      print("letter",i)
      cat=pow(pb_key[0],pb_key[1])
      c=(cat%pb_key[2])
      print(c)
      print("\n")
     # ciphertext
  #print(letter_code)    
  
letter_code=[20,8,5,28,3,15,21,18,19,5,28,23,1,19,28,5,14,10,15,25,1,2,12,5,29,9,14,20,5,18,1,3,20,9,22,5,28,1,14,4,28,5,4,21,3,1,20,9,22,5,27,23,5,28,18,5,3,15,13,13,5,14,4,28,13,15,18,5,28,17,21,9,26,26,5,19,27,18,1,20,5,4,28,19,5,22,5,14,28,15,21,20,28,15,6,28,20,5,14,27]  
pb_key=[1,e,n] 
#To decrypt,pb_key=[1,d,n]
ciphertext=EncryptoDecryptoG9(pb_key,letter_code)Getting greatest common divisor


 
 


   
 
